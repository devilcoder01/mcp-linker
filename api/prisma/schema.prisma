generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = "5"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Update User model to include new relations
model User {
  id               String               @id @db.VarChar(255)
  email            String?              @db.VarChar(255)
  username         String?              @db.VarChar(255)
  avatar_url       String               @db.VarChar(255)
  role             String               @default("user") @db.VarChar(50)
  created_at       DateTime             @default(now()) @db.Timestamptz(6)
  updated_at       DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  fullname         String?              @db.VarChar(255)
  
  // Existing relations
  servers          Server[]
  favorite_servers UserFavoriteServer[]
  
  // New team relations
  owned_teams      Team[]               @relation("TeamOwner")
  team_memberships TeamMember[]        @relation("TeamMembership")
  team_invites     TeamMember[]        @relation("TeamInviter")
  created_configs  TeamConfig[]        @relation("ConfigCreator")
  
  // Usage tracking
  usage_logs       UsageLog[]           @relation("UserUsage")
  
  // Backup relations
  backups          ConfigBackup[]       @relation("UserBackups")
  sync_logs        SyncLog[]            @relation("UserSyncs")

  @@map("users")
}

model Server {
  id             String               @id @default(uuid())
  name           String               @db.VarChar(255)
  qualified_name String?              @db.VarChar(255)
  description    String
  source         String               @db.VarChar(255)
  developer      String               @db.VarChar(255)
  is_official    Boolean              @default(false)
  rating         Float                @default(0.0) @db.Real
  logo_url       String?              @db.VarChar(255)
  github_stars   Int                  @default(0)
  downloads      Int                  @default(0)
  views          Int                  @default(0)
  user_id        String?
  cat            String?              @db.VarChar(255)
  created_at     DateTime             @default(now()) @db.Timestamp(6)
  updated_at     DateTime             @updatedAt @db.Timestamp(6)
  tags           String[]             @db.VarChar(100)
  server_configs ServerConfig[]
  user           User?                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  favorited_by   UserFavoriteServer[]

  @@index([name], map: "idx_servers_name")
  @@index([user_id], map: "idx_servers_user_id")
  @@map("servers")
}

model ServerConfig {
  id           String  @id @default(uuid())
  config_items Json    @db.Json
  server_id    String
  server       Server  @relation(fields: [server_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([server_id], map: "idx_server_configs_server_id")
  @@map("server_configs")
}

model UserFavoriteServer {
  user_id    String
  server_id  String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  server     Server    @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, server_id])
  @@index([server_id], map: "idx_user_favorite_servers_server_id")
  @@index([user_id], map: "idx_user_favorite_servers_user_id")
  @@map("user_favorite_servers")
}

// Team collaboration models
model Team {
  id          String       @id @default(uuid())
  name        String       @db.VarChar(255)
  description String?      @db.Text
  owner_id    String
  created_at  DateTime     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime     @default(now()) @updatedAt @db.Timestamptz(6)
  
  owner       User         @relation("TeamOwner", fields: [owner_id], references: [id], onDelete: Cascade)
  members     TeamMember[]
  configs     TeamConfig[]
  usage_logs  UsageLog[]
  
  @@map("teams")
}

model TeamMember {
  id         String         @id @default(uuid())
  team_id    String
  user_id    String
  role       TeamRole       @default(MEMBER)
  invited_by String?
  joined_at  DateTime       @default(now()) @db.Timestamptz(6)
  
  team       Team           @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user       User           @relation("TeamMembership", fields: [user_id], references: [id], onDelete: Cascade)
  inviter    User?          @relation("TeamInviter", fields: [invited_by], references: [id])
  
  @@unique([team_id, user_id])
  @@map("team_members")
}

model TeamConfig {
  id          String   @id @default(uuid())
  team_id     String
  name        String   @db.VarChar(255)
  description String?  @db.Text
  encrypt_config_data String   @db.Text
  created_by  String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  
  team        Team     @relation(fields: [team_id], references: [id], onDelete: Cascade)
  creator     User     @relation("ConfigCreator", fields: [created_by], references: [id])
  
  @@unique([team_id, name])
  @@map("team_configs")
}

// Usage tracking models
model UsageLog {
  id         String     @id @default(uuid())
  user_id    String
  team_id    String?
  action     String     @db.VarChar(100)
  resource   String     @db.VarChar(255)
  details    Json?      @db.Json
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  
  user       User       @relation("UserUsage", fields: [user_id], references: [id], onDelete: Cascade)
  team       Team?      @relation(fields: [team_id], references: [id], onDelete: Cascade)
  
  @@index([user_id, created_at])
  @@index([team_id, created_at])
  @@map("usage_logs")
}

// Cloud backup models
model ConfigBackup {
  id           String          @id @default(uuid())
  user_id      String
  client_name  String          @db.VarChar(100)
  backup_type  BackupType      @default(AUTO)
  config_data  Json            @db.Json
  file_hash    String          @db.VarChar(64)
  created_at   DateTime        @default(now()) @db.Timestamptz(6)
  
  user         User            @relation("UserBackups", fields: [user_id], references: [id], onDelete: Cascade)
  versions     BackupVersion[]
  
  @@index([user_id, client_name, created_at])
  @@map("config_backups")
}

model BackupVersion {
  id            String        @id @default(uuid())
  backup_id     String
  version       Int
  changes       Json?         @db.Json  // JSON diff from previous version
  config_data   Json          @db.Json  // Full config data
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  
  backup        ConfigBackup  @relation(fields: [backup_id], references: [id], onDelete: Cascade)
  
  @@unique([backup_id, version])
  @@map("backup_versions")
}

model SyncLog {
  id          String    @id @default(uuid())
  user_id     String
  device_id   String    @db.VarChar(255)
  client_name String    @db.VarChar(100)
  sync_type   SyncType  @default(PULL)
  status      String    @db.VarChar(50)
  error_msg   String?   @db.Text
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  
  user        User      @relation("UserSyncs", fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id, created_at])
  @@map("sync_logs")
}

// Enums
enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum BackupType {
  AUTO
  MANUAL
  SCHEDULED
}

enum SyncType {
  PUSH
  PULL
  SYNC
}
