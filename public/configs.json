{
  "modelcontextprotocol/aws-kb-retrieval-server": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "AWS_ACCESS_KEY_ID",
        "-e",
        "AWS_SECRET_ACCESS_KEY",
        "-e",
        "AWS_REGION",
        "mcp/aws-kb-retrieval-server"
      ],
      "env": {
        "AWS_ACCESS_KEY_ID": "YOUR_ACCESS_KEY_HERE",
        "AWS_SECRET_ACCESS_KEY": "YOUR_SECRET_ACCESS_KEY_HERE",
        "AWS_REGION": "YOUR_AWS_REGION_HERE"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-aws-kb-retrieval"
      ],
      "env": {
        "AWS_ACCESS_KEY_ID": "YOUR_ACCESS_KEY_HERE",
        "AWS_SECRET_ACCESS_KEY": "YOUR_SECRET_ACCESS_KEY_HERE",
        "AWS_REGION": "YOUR_AWS_REGION_HERE"
      }
    }
  ],
  "modelcontextprotocol/brave-search": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "BRAVE_API_KEY",
        "mcp/brave-search"
      ],
      "env": {
        "BRAVE_API_KEY": "YOUR_API_KEY_HERE"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-brave-search"
      ],
      "env": {
        "BRAVE_API_KEY": "YOUR_API_KEY_HERE"
      }
    }
  ],
  "modelcontextprotocol/everart": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "EVERART_API_KEY",
        "mcp/everart"
      ],
      "env": {
        "EVERART_API_KEY": "your_key_here"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-everart"
      ],
      "env": {
        "EVERART_API_KEY": "your_key_here"
      }
    }
  ],
  "modelcontextprotocol/everything": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-everything"
      ]
    }
  ],
  "modelcontextprotocol/fetch": [
    {
      "command": "uvx",
      "args": [
        "mcp-server-fetch"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/fetch"
      ]
    },
    {
      "command": "python",
      "args": [
        "-m",
        "mcp_server_fetch"
      ]
    }
  ],
  "modelcontextprotocol/filesystem": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "--mount",
        "type=bind,src=/Users/username/Desktop,dst=/projects/Desktop",
        "--mount",
        "type=bind,src=/path/to/other/allowed/dir,dst=/projects/other/allowed/dir,ro",
        "--mount",
        "type=bind,src=/path/to/file.txt,dst=/projects/path/to/file.txt",
        "mcp/filesystem",
        "/projects"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/Users/username/Desktop",
        "/path/to/other/allowed/dir"
      ]
    }
  ],
  "modelcontextprotocol/git": [
    {
      "command": "uvx",
      "args": [
        "mcp-server-git",
        "--repository",
        "path/to/git/repo"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "--mount",
        "type=bind,src=/Users/username,dst=/Users/username",
        "mcp/git"
      ]
    },
    {
      "command": "python",
      "args": [
        "-m",
        "mcp_server_git",
        "--repository",
        "path/to/git/repo"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "--mount",
        "type=bind,src=/Users/username/Desktop,dst=/projects/Desktop",
        "--mount",
        "type=bind,src=/path/to/other/allowed/dir,dst=/projects/other/allowed/dir,ro",
        "--mount",
        "type=bind,src=/path/to/file.txt,dst=/projects/path/to/file.txt",
        "mcp/git"
      ]
    },
    {
      "command": "uv",
      "args": [
        "--directory",
        "/<path to mcp-servers>/mcp-servers/src/git",
        "run",
        "mcp-server-git"
      ]
    }
  ],
  "modelcontextprotocol/github": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "GITHUB_PERSONAL_ACCESS_TOKEN",
        "mcp/github"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-github"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
      }
    }
  ],
  "modelcontextprotocol/gdrive": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-v",
        "mcp-gdrive:/gdrive-server",
        "-e",
        "GDRIVE_CREDENTIALS_PATH=/gdrive-server/credentials.json",
        "mcp/gdrive"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-gdrive"
      ]
    }
  ],
  "modelcontextprotocol/google-maps": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "GOOGLE_MAPS_API_KEY",
        "mcp/google-maps"
      ],
      "env": {
        "GOOGLE_MAPS_API_KEY": "<YOUR_API_KEY>"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-google-maps"
      ],
      "env": {
        "GOOGLE_MAPS_API_KEY": "<YOUR_API_KEY>"
      }
    }
  ],
  "modelcontextprotocol/memory": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "-v",
        "claude-memory:/app/dist",
        "--rm",
        "mcp/memory"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-memory"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-memory"
      ],
      "env": {
        "MEMORY_FILE_PATH": "/path/to/custom/memory.json"
      }
    }
  ],
  "modelcontextprotocol/postgres": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/postgres",
        "postgresql://host.docker.internal:5432/mydb"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-postgres",
        "postgresql://localhost/mydb"
      ]
    }
  ],
  "modelcontextprotocol/puppeteer": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "--init",
        "-e",
        "DOCKER_CONTAINER=true",
        "mcp/puppeteer"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-puppeteer"
      ]
    }
  ],
  "modelcontextprotocol/redis": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/redis",
        "redis://host.docker.internal:6379"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-redis",
        "redis://localhost:6379"
      ]
    }
  ],
  "modelcontextprotocol/sentry": [
    {
      "command": "uvx",
      "args": [
        "mcp-server-sentry",
        "--auth-token",
        "YOUR_SENTRY_TOKEN"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/sentry",
        "--auth-token",
        "YOUR_SENTRY_TOKEN"
      ]
    },
    {
      "command": "python",
      "args": [
        "-m",
        "mcp_server_sentry",
        "--auth-token",
        "YOUR_SENTRY_TOKEN"
      ]
    }
  ],
  "modelcontextprotocol/sequentialthinking": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "mcp/sequentialthinking"
      ]
    }
  ],
  "modelcontextprotocol/slack": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-slack"
      ],
      "env": {
        "SLACK_BOT_TOKEN": "xoxb-your-bot-token",
        "SLACK_TEAM_ID": "T01234567"
      }
    },
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "SLACK_BOT_TOKEN",
        "-e",
        "SLACK_TEAM_ID",
        "mcp/slack"
      ],
      "env": {
        "SLACK_BOT_TOKEN": "xoxb-your-bot-token",
        "SLACK_TEAM_ID": "T01234567"
      }
    }
  ],
  "modelcontextprotocol/time": [
    {
      "command": "uvx",
      "args": [
        "mcp-server-time"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/time"
      ]
    },
    {
      "command": "python",
      "args": [
        "-m",
        "mcp_server_time"
      ]
    }
  ],
  "21st-dev/magic-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@smithery/cli@latest",
        "install",
        "@21st-dev/magic-mcp",
        "--client",
        "windsurf"
      ],
      "env": {
        "TWENTY_FIRST_API_KEY": "your-api-key"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@smithery/cli@latest",
        "install",
        "@21st-dev/magic-mcp",
        "--client",
        "cline"
      ],
      "env": {
        "TWENTY_FIRST_API_KEY": "your-api-key"
      }
    }
  ],
  "Adfin-Engineering/mcp-server-adfin": [
    {
      "command": "<home_path>/.local/bin/uv",
      "args": [
        "--directory",
        "<absolute_path_to_adfin_mcp_folder>",
        "run",
        "main_adfin_mcp.py"
      ],
      "env": {
        "ADFIN_EMAIL": "<email>",
        "ADFIN_PASSWORD": "<password>"
      }
    }
  ],
  "tinyfish-io/agentql-mcp": [
    {
      "command": "/path/to/agentql-mcp/dist/index.js",
      "env": {
        "AGENTQL_API_KEY": "YOUR_API_KEY"
      }
    }
  ],
  "agentrpc/agentrpc": [
    {
      "command": "npx",
      "args": [
        "-y",
        "agentrpc",
        "mcp"
      ],
      "env": {
        "AGENTRPC_API_SECRET": "<YOUR_API_SECRET>"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "agentrpc",
        "mcp"
      ],
      "env": {
        "AGENTRPC_API_SECRET": "<YOUR_API_SECRET>"
      }
    }
  ],
  "Aiven-Open/mcp-aiven": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "$REPOSITORY_DIRECTORY",
        "run",
        "--with-editable",
        "$REPOSITORY_DIRECTORY",
        "--python",
        "3.13",
        "mcp-aiven"
      ],
      "env": {
        "AIVEN_BASE_URL": "https://api.aiven.io",
        "AIVEN_TOKEN": "$AIVEN_TOKEN"
      }
    }
  ],
  "bankless/onchain-mcp": [
    {
      "command": "npx",
      "args": [
        "@bankless/onchain-mcp"
      ],
      "env": {
        "BANKLESS_API_TOKEN": "your_api_token_here"
      }
    }
  ],
  "box-community/mcp-server-box": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/path-to-your-project/mcp-server-box",
        "run",
        "src/mcp_server_box.py"
      ]
    }
  ],
  "chroma-core/chroma-mcp": [
    {
      "command": "uvx",
      "args": [
        "chroma-mcp"
      ]
    },
    {
      "command": "uvx",
      "args": [
        "chroma-mcp",
        "--client-type",
        "persistent",
        "--data-dir",
        "/full/path/to/your/data/directory"
      ]
    },
    {
      "command": "uvx",
      "args": [
        "chroma-mcp",
        "--client-type",
        "cloud",
        "--tenant",
        "your-tenant-id",
        "--database",
        "your-database-name",
        "--api-key",
        "your-api-key"
      ]
    },
    {
      "command": "uvx",
      "args": [
        "chroma-mcp",
        "--client-type",
        "http",
        "--host",
        "your-host",
        "--port",
        "your-port",
        "--custom-auth-credentials",
        "your-custom-auth-credentials",
        "--ssl",
        "true"
      ]
    }
  ],
  "ClickHouse/mcp-clickhouse": [
    {
      "command": "uv",
      "args": [
        "run",
        "--with",
        "mcp-clickhouse",
        "--python",
        "3.13",
        "mcp-clickhouse"
      ],
      "env": {
        "CLICKHOUSE_HOST": "<clickhouse-host>",
        "CLICKHOUSE_PORT": "<clickhouse-port>",
        "CLICKHOUSE_USER": "<clickhouse-user>",
        "CLICKHOUSE_PASSWORD": "<clickhouse-password>",
        "CLICKHOUSE_SECURE": "true",
        "CLICKHOUSE_VERIFY": "true",
        "CLICKHOUSE_CONNECT_TIMEOUT": "30",
        "CLICKHOUSE_SEND_RECEIVE_TIMEOUT": "30"
      }
    },
    {
      "command": "uv",
      "args": [
        "run",
        "--with",
        "mcp-clickhouse",
        "--python",
        "3.13",
        "mcp-clickhouse"
      ],
      "env": {
        "CLICKHOUSE_HOST": "sql-clickhouse.clickhouse.com",
        "CLICKHOUSE_PORT": "8443",
        "CLICKHOUSE_USER": "demo",
        "CLICKHOUSE_PASSWORD": "",
        "CLICKHOUSE_SECURE": "true",
        "CLICKHOUSE_VERIFY": "true",
        "CLICKHOUSE_CONNECT_TIMEOUT": "30",
        "CLICKHOUSE_SEND_RECEIVE_TIMEOUT": "30"
      }
    },
    {
      "command": "uv",
      "args": [
        "run",
        "--with",
        "mcp-clickhouse",
        "--python",
        "3.13",
        "mcp-clickhouse"
      ],
      "env": {
        "CLICKHOUSE_HOST": "<clickhouse-host>",
        "CLICKHOUSE_USER": "<clickhouse-user>",
        "CLICKHOUSE_PASSWORD": "<clickhouse-password>",
        "CLICKHOUSE_DATABASE": "<optional-database>"
      }
    }
  ],
  "EduBase/MCP": [
    {
      "command": "node",
      "args": [
        "/path/to/dist/index.js"
      ],
      "env": {
        "EDUBASE_API_URL": "https://domain.edubase.net/api",
        "EDUBASE_API_APP": "your_integration_app_id",
        "EDUBASE_API_KEY": "your_integration_secret_key"
      }
    },
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "EDUBASE_API_URL",
        "-e",
        "EDUBASE_API_APP",
        "-e",
        "EDUBASE_API_KEY",
        "edubase/mcp"
      ],
      "env": {
        "EDUBASE_API_URL": "https://domain.edubase.net/api",
        "EDUBASE_API_APP": "your_integration_app_id",
        "EDUBASE_API_KEY": "your_integration_secret_key"
      }
    }
  ],
  "exa-labs/exa-mcp-server": [
    {
      "command": "npx",
      "args": [
        "/path/to/exa-mcp-server/build/index.js"
      ],
      "env": {
        "EXA_API_KEY": "your-api-key-here"
      }
    }
  ],
  "Fewsats/fewsats-mcp": [
    {
      "command": "uvx",
      "args": [
        "fewsats-mcp"
      ],
      "env": {
        "FEWSATS_API_KEY": "YOUR_FEWSATS_API_KEY"
      }
    }
  ],
  "Fibery-inc/fibery-mcp-server": [
    {
      "command": "uv",
      "args": [
        "tool",
        "run",
        "fibery-mcp-server",
        "--fibery-host",
        "your-domain.fibery.io",
        "--fibery-api-token",
        "your-api-token"
      ]
    },
    {
      "command": "uv",
      "args": [
        "--directory",
        "path/to/cloned/fibery-mcp-server",
        "run",
        "fibery-mcp-server",
        "--fibery-host",
        "your-domain.fibery.io",
        "--fibery-api-token",
        "your-api-token"
      ]
    }
  ],
  "mendableai/firecrawl-mcp-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "firecrawl-mcp"
      ],
      "env": {
        "FIRECRAWL_API_KEY": "YOUR_API_KEY_HERE"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "firecrawl-mcp"
      ],
      "env": {
        "FIRECRAWL_API_KEY": "YOUR_API_KEY_HERE",
        "FIRECRAWL_RETRY_MAX_ATTEMPTS": "5",
        "FIRECRAWL_RETRY_INITIAL_DELAY": "2000",
        "FIRECRAWL_RETRY_MAX_DELAY": "30000",
        "FIRECRAWL_RETRY_BACKOFF_FACTOR": "3",
        "FIRECRAWL_CREDIT_WARNING_THRESHOLD": "2000",
        "FIRECRAWL_CREDIT_CRITICAL_THRESHOLD": "500"
      }
    }
  ],
  "fireproof-storage/mcp-database-server": [
    {
      "command": "/path/to/fireproof-mcp/build/index.js"
    }
  ],
  "oschina/mcp-gitee": [
    {
      "command": "mcp-gitee",
      "env": {
        "GITEE_API_BASE": "https://gitee.com/api/v5",
        "GITEE_ACCESS_TOKEN": "<your personal access token>"
      }
    }
  ],
  "aliyun/alibabacloud-hologres-mcp-server": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/path/to/alibabacloud-hologres-mcp-server",
        "run",
        "hologres-mcp-server"
      ],
      "env": {
        "HOLOGRES_HOST": "host",
        "HOLOGRES_PORT": "port",
        "HOLOGRES_USER": "access_id",
        "HOLOGRES_PASSWORD": "access_key",
        "HOLOGRES_DATABASE": "database"
      }
    },
    {
      "command": "uv",
      "args": [
        "run",
        "--with",
        "hologres-mcp-server",
        "hologres-mcp-server"
      ],
      "env": {
        "HOLOGRES_HOST": "host",
        "HOLOGRES_PORT": "port",
        "HOLOGRES_USER": "access_id",
        "HOLOGRES_PASSWORD": "access_key",
        "HOLOGRES_DATABASE": "database"
      }
    }
  ],
  "hyperbrowserai/mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "hyperbrowser-mcp"
      ],
      "env": {
        "HYPERBROWSER_API_KEY": "YOUR-API-KEY"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "hyperbrowser-mcp"
      ],
      "env": {
        "HYPERBROWSER_API_KEY": "YOUR-API-KEY"
      }
    },
    {
      "command": "npx",
      "args": [
        "--yes",
        "hyperbrowser-mcp"
      ],
      "env": {
        "HYPERBROWSER_API_KEY": "your-api-key"
      }
    }
  ],
  "integration-app/mcp-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@integration-app/mcp-server"
      ],
      "env": {
        "INTEGRATION_APP_TOKEN": "<your-integration-app-token>",
        "INTEGRATION_KEY": "hubspot"
      }
    }
  ],
  "pydantic/logfire-mcp": [
    {
      "command": "uvx",
      "args": [
        "logfire-mcp",
        "--read-token=YOUR-TOKEN"
      ]
    },
    {
      "command": "uvx",
      "args": [
        "logfire-mcp"
      ],
      "env": {
        "LOGFIRE_READ_TOKEN": "YOUR_TOKEN"
      },
      "disabled": false,
      "autoApprove": []
    }
  ],
  "langfuse/mcp-server-langfuse": [
    {
      "command": "node",
      "args": [
        "<absolute-path>/build/index.js"
      ],
      "env": {
        "LANGFUSE_PUBLIC_KEY": "your-public-key",
        "LANGFUSE_SECRET_KEY": "your-secret-key",
        "LANGFUSE_BASEURL": "https://cloud.langfuse.com"
      }
    }
  ],
  "integromat/make-mcp-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@makehq/mcp-server"
      ],
      "env": {
        "MAKE_API_KEY": "<your-api-key>",
        "MAKE_ZONE": "<your-zone>",
        "MAKE_TEAM": "<your-team-id>"
      }
    }
  ],
  "meilisearch/meilisearch-mcp": [
    {
      "command": "uvx",
      "args": [
        "-n",
        "meilisearch-mcp"
      ]
    }
  ],
  "metoro-io/metoro-mcp-server": [
    {
      "command": "<your path to Metoro MCP server go executable>/metoro-mcp-server",
      "args": [],
      "env": {
        "METORO_AUTH_TOKEN": "<your auth token>",
        "METORO_API_URL": "https://us-east.metoro.io"
      }
    },
    {
      "command": "<your path to Metoro MCP server go executable>/metoro-mcp-server",
      "args": [],
      "env": {
        "METORO_AUTH_TOKEN": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21lcklkIjoiOThlZDU1M2QtYzY4ZC00MDRhLWFhZjItNDM2ODllNWJiMGUzIiwiZW1haWwiOiJ0ZXN0QGNocmlzYmF0dGFyYmVlLmNvbSIsImV4cCI6MTgyMTI0NzIzN30.7G6alDpcZh_OThYj293Jce5rjeOBqAhOlANR_Fl5auw",
        "METORO_API_URL": "https://demo.us-east.metoro.io"
      }
    }
  ],
  "zilliztech/mcp-server-milvus": [
    {
      "command": "/PATH/TO/uv",
      "args": [
        "--directory",
        "/path/to/mcp-server-milvus/src/mcp_server_milvus",
        "run",
        "server.py",
        "--milvus-uri",
        "http://localhost:19530"
      ]
    }
  ],
  "motherduckdb/mcp-server-motherduck": [
    {
      "command": "uvx",
      "args": [
        "mcp-server-motherduck",
        "--db-path",
        "md:",
        "--motherduck-token",
        "<YOUR_MOTHERDUCK_TOKEN_HERE>"
      ]
    }
  ],
  "needle-ai/needle-mcp": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/path/to/needle-mcp",
        "run",
        "needle-mcp"
      ],
      "env": {
        "NEEDLE_API_KEY": "your_needle_api_key"
      }
    }
  ],
  "ppl-ai/modelcontextprotocol": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "PERPLEXITY_API_KEY",
        "mcp/perplexity-ask"
      ],
      "env": {
        "PERPLEXITY_API_KEY": "YOUR_API_KEY_HERE"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-perplexity-ask"
      ],
      "env": {
        "PERPLEXITY_API_KEY": "YOUR_API_KEY_HERE"
      }
    }
  ],
  "qdrant/mcp-server-qdrant/": [
    {
      "command": "uvx",
      "args": [
        "mcp-server-qdrant"
      ],
      "env": {
        "QDRANT_URL": "https://xyz-example.eu-central.aws.cloud.qdrant.io:6333",
        "QDRANT_API_KEY": "your_api_key",
        "COLLECTION_NAME": "your-collection-name",
        "EMBEDDING_MODEL": "sentence-transformers/all-MiniLM-L6-v2"
      }
    },
    {
      "command": "uvx",
      "args": [
        "mcp-server-qdrant"
      ],
      "env": {
        "QDRANT_LOCAL_PATH": "/path/to/qdrant/database",
        "COLLECTION_NAME": "your-collection-name",
        "EMBEDDING_MODEL": "sentence-transformers/all-MiniLM-L6-v2"
      }
    }
  ],
  "ramp-public/ramp-mcp": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/<ABSOLUTE-PATH-TO>/ramp-mcp",
        "run",
        "ramp-mcp",
        "-s",
        "transactions:read,reimbursements:read"
      ],
      "env": {
        "RAMP_CLIENT_ID": "<CLIENT_ID>",
        "RAMP_CLIENT_SECRET": "<CLIENT_SECRET>",
        "RAMP_ENV": "<demo|qa|prd>"
      }
    }
  ],
  "MindscapeHQ/mcp-server-raygun": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@raygun.io/mcp-server-raygun"
      ],
      "env": {
        "RAYGUN_PAT_TOKEN": "your-pat-token-here"
      }
    },
    {
      "command": "/path/to/server-raygun/build/index.js",
      "env": {
        "RAYGUN_PAT_TOKEN": "your-pat-token-ken"
      }
    }
  ],
  "rember/rember-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@getrember/mcp",
        "--api-key=YOUR_REMBER_API_KEY"
      ]
    }
  ],
  "riza-io/riza-mcp": [
    {
      "command": "npx",
      "args": [
        "@riza-io/riza-mcp"
      ],
      "env": {
        "RIZA_API_KEY": "your-api-key"
      }
    }
  ],
  "fatwang2/search1api-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "search1api-mcp"
      ],
      "env": {
        "SEARCH1API_KEY": "YOUR_SEARCH1API_KEY"
      }
    }
  ],
  "screenshotone/mcp/": [
    {
      "command": "node",
      "args": [
        "path/to/screenshotone/mcp/build/index.js"
      ],
      "env": {
        "SCREENSHOTONE_API_KEY": "<your api key>"
      }
    }
  ],
  "StarRocks/mcp-server-starrocks": [
    {
      "command": "uv",
      "args": [
        "run",
        "--with",
        "mcp-server-starrocks",
        "mcp-server-starrocks"
      ],
      "env": {
        "STARROCKS_HOST": "default localhost",
        "STARROCKS_PORT": "default 9030",
        "STARROCKS_USER": "default root",
        "STARROCKS_PASSWORD": "default empty"
      }
    },
    {
      "command": "uv",
      "args": [
        "--directory",
        "path/to/mcp-server-starrocks",
        "run",
        "mcp-server-starrocks"
      ],
      "env": {
        "STARROCKS_HOST": "default localhost",
        "STARROCKS_PORT": "default 9030",
        "STARROCKS_USER": "default root",
        "STARROCKS_PASSWORD": "default empty"
      }
    }
  ],
  "tavily-ai/tavily-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "tavily-mcp@0.1.2"
      ],
      "env": {
        "TAVILY_API_KEY": "your-api-key-here"
      }
    },
    {
      "command": "npx",
      "args": [
        "/path/to/tavily-mcp/build/index.js"
      ],
      "env": {
        "TAVILY_API_KEY": "your-api-key-here"
      }
    }
  ],
  "tinybirdco/mcp-tinybird": [
    {
      "command": "uvx",
      "args": [
        "mcp-tinybird",
        "stdio"
      ],
      "env": {
        "TB_API_URL": "<TINYBIRD_API_URL>",
        "TB_ADMIN_TOKEN": "<TINYBIRD_ADMIN_TOKEN>"
      }
    },
    {
      "command": "uv",
      "args": [
        "--directory",
        "/path/to/your/mcp-tinybird",
        "run",
        "mcp-tinybird",
        "stdio"
      ]
    }
  ],
  "vectorize-io/vectorize-mcp-server/": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@vectorize-io/vectorize-mcp-server"
      ],
      "env": {
        "VECTORIZE_ORG_ID": "your-org-id",
        "VECTORIZE_TOKEN": "your-token"
      }
    }
  ],
  "zenml-io/mcp-zenml": [
    {
      "command": "/usr/local/bin/uv",
      "args": [
        "run",
        "path/to/zenml_server.py"
      ],
      "env": {
        "LOGLEVEL": "INFO",
        "NO_COLOR": "1",
        "PYTHONUNBUFFERED": "1",
        "PYTHONIOENCODING": "UTF-8",
        "ZENML_STORE_URL": "https://your-zenml-server-goes-here.com",
        "ZENML_STORE_API_KEY": "your-api-key-here"
      }
    }
  ],
  "Simon-Kansara/ableton-live-mcp-server": [
    {
      "command": "uv",
      "args": [
        "run",
        "--with",
        "mcp[cli]",
        "--with",
        "python-osc",
        "mcp",
        "run",
        "/Users/simonkansara/Desktop/mcp-ableton-server/mcp-ableton-server.py"
      ]
    }
  ],
  "openbnb-org/mcp-server-airbnb": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@openbnb/mcp-server-airbnb"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@openbnb/mcp-server-airbnb",
        "--ignore-robots-txt"
      ]
    }
  ],
  "yangkyeongmo/mcp-server-apache-airflow": [
    {
      "command": "uvx",
      "args": [
        "mcp-server-apache-airflow"
      ],
      "env": {
        "AIRFLOW_HOST": "https://your-airflow-host",
        "AIRFLOW_USERNAME": "your-username",
        "AIRFLOW_PASSWORD": "your-password"
      }
    },
    {
      "command": "uv",
      "args": [
        "--directory",
        "/path/to/mcp-server-apache-airflow",
        "run",
        "mcp-server-apache-airflow"
      ],
      "env": {
        "AIRFLOW_HOST": "https://your-airflow-host",
        "AIRFLOW_USERNAME": "your-username",
        "AIRFLOW_PASSWORD": "your-password"
      }
    }
  ],
  "domdomegg/airtable-mcp-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "airtable-mcp-server"
      ],
      "env": {
        "AIRTABLE_API_KEY": "pat123.abc123"
      }
    }
  ],
  "felores/airtable-mcp": [
    {
      "command": "npx",
      "args": [
        "@felores/airtable-mcp-server"
      ],
      "env": {
        "AIRTABLE_API_KEY": "your_api_key_here"
      }
    },
    {
      "command": "node",
      "args": [
        "path/to/airtable-mcp/build/index.js"
      ],
      "env": {
        "AIRTABLE_API_KEY": "your_api_key_here"
      }
    }
  ],
  "scorzeth/anki-mcp-server": [
    {
      "command": "/path/to/anki-mcp-server/build/index.js"
    }
  ],
  "ravenwits/mcp-server-arangodb": [
    {
      "command": "node",
      "args": [
        "/path/to/arango-server/build/index.js"
      ],
      "env": {
        "ARANGO_URL": "your_database_url",
        "ARANGO_DATABASE": "your_database_name",
        "ARANGO_USERNAME": "your_username",
        "ARANGO_PASSWORD": "your_password"
      }
    }
  ],
  "sooperset/mcp-atlassian": [
    {
      "command": "uvx",
      "args": [
        "mcp-atlassian"
      ],
      "env": {
        "CONFLUENCE_URL": "https://your-domain.atlassian.net/wiki",
        "CONFLUENCE_USERNAME": "your.email@domain.com",
        "CONFLUENCE_API_TOKEN": "your_api_token",
        "JIRA_URL": "https://your-domain.atlassian.net",
        "JIRA_USERNAME": "your.email@domain.com",
        "JIRA_API_TOKEN": "your_api_token"
      }
    },
    {
      "command": "uvx",
      "args": [
        "mcp-atlassian"
      ],
      "env": {
        "CONFLUENCE_URL": "https://confluence.your-company.com",
        "CONFLUENCE_PERSONAL_TOKEN": "your_personal_access_token",
        "JIRA_URL": "https://jira.your-company.com",
        "JIRA_PERSONAL_TOKEN": "your_personal_access_token"
      }
    },
    {
      "command": "python",
      "args": [
        "-m",
        "mcp-atlassian"
      ],
      "env": {
        "CONFLUENCE_URL": "https://your-domain.atlassian.net/wiki",
        "CONFLUENCE_USERNAME": "your.email@domain.com",
        "CONFLUENCE_API_TOKEN": "your_api_token",
        "JIRA_URL": "https://your-domain.atlassian.net",
        "JIRA_USERNAME": "your.email@domain.com",
        "JIRA_API_TOKEN": "your_api_token"
      }
    },
    {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "mcp/atlassian"
      ],
      "env": {
        "CONFLUENCE_URL": "https://your-domain.atlassian.net/wiki",
        "CONFLUENCE_USERNAME": "your.email@domain.com",
        "CONFLUENCE_API_TOKEN": "your_api_token",
        "JIRA_URL": "https://your-domain.atlassian.net",
        "JIRA_USERNAME": "your.email@domain.com",
        "JIRA_API_TOKEN": "your_api_token"
      }
    },
    {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "--env-file",
        "/path/to/your/.env",
        "mcp/atlassian"
      ]
    },
    {
      "command": "uv",
      "args": [
        "--directory",
        "/path/to/your/mcp-atlassian",
        "run",
        "mcp-atlassian",
        "--confluence-url=https://your-domain.atlassian.net/wiki",
        "--confluence-username=your.email@domain.com",
        "--confluence-token=your_api_token",
        "--jira-url=https://your-domain.atlassian.net",
        "--jira-username=your.email@domain.com",
        "--jira-token=your_api_token"
      ]
    }
  ],
  "aarora79/aws-cost-explorer-mcp-server": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "AWS_ACCESS_KEY_ID",
        "-e",
        "AWS_SECRET_ACCESS_KEY",
        "-e",
        "AWS_REGION",
        "-e",
        "BEDROCK_LOG_GROUP_NAME",
        "-e",
        "MCP_TRANSPORT",
        "aws-cost-explorer-mcp:latest"
      ],
      "env": {
        "AWS_ACCESS_KEY_ID": "YOUR_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY": "YOUR_SECRET_ACCESS_KEY",
        "AWS_REGION": "us-east-1",
        "BEDROCK_LOG_GROUP_NAME": "YOUR_CLOUDWATCH_BEDROCK_MODEL_INVOCATION_LOG_GROUP_NAME",
        "MCP_TRANSPORT": "stdio"
      }
    },
    {
      "command": "uv",
      "args": [
        "--directory",
        "/path/to/aws-cost-explorer-mcp-server",
        "run",
        "server.py"
      ],
      "env": {
        "AWS_ACCESS_KEY_ID": "YOUR_ACCESS_KEY_ID",
        "AWS_SECRET_ACCESS_KEY": "YOUR_SECRET_ACCESS_KEY",
        "AWS_REGION": "us-east-1",
        "BEDROCK_LOG_GROUP_NAME": "YOUR_CLOUDWATCH_BEDROCK_MODEL_INVOCATION_LOG_GROUP_NAME",
        "MCP_TRANSPORT": "stdio"
      }
    }
  ],
  "baryhuang/mcp-server-aws-resources-python": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "AWS_ACCESS_KEY_ID=your_access_key_id_here",
        "-e",
        "AWS_SECRET_ACCESS_KEY=your_secret_access_key_here",
        "-e",
        "AWS_DEFAULT_REGION=us-east-1",
        "buryhuang/mcp-server-aws-resources:latest"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "AWS_PROFILE=default",
        "-v",
        "~/.aws:/root/.aws",
        "buryhuang/mcp-server-aws-resources:latest"
      ]
    }
  ],
  "aws-samples/sample-mcp-server-s3": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/Users/user/generative_ai/model_context_protocol/s3-mcp-server",
        "run",
        "s3-mcp-server"
      ]
    }
  ],
  "pab1it0/adx-mcp-server": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "<full path to adx-mcp-server directory>",
        "run",
        "src/adx_mcp_server/main.py"
      ],
      "env": {
        "ADX_CLUSTER_URL": "https://yourcluster.region.kusto.windows.net",
        "ADX_DATABASE": "your_database",
        "AZURE_TENANT_ID": "your_tenant_id",
        "AZURE_CLIENT_ID": "your_client_id",
        "AZURE_CLIENT_SECRET": "your_client_secret"
      }
    },
    {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "-e",
        "ADX_CLUSTER_URL",
        "-e",
        "ADX_DATABASE",
        "-e",
        "AZURE_TENANT_ID",
        "-e",
        "AZURE_CLIENT_ID",
        "-e",
        "AZURE_CLIENT_SECRET",
        "adx-mcp-server"
      ],
      "env": {
        "ADX_CLUSTER_URL": "https://yourcluster.region.kusto.windows.net",
        "ADX_DATABASE": "your_database",
        "AZURE_TENANT_ID": "your_tenant_id",
        "AZURE_CLIENT_ID": "your_client_id",
        "AZURE_CLIENT_SECRET": "your_client_secret"
      }
    }
  ],
  "magnetai/mcp-free-usdc-transfer": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@magnetai/free-usdc-transfer"
      ],
      "env": {
        "COINBASE_CDP_API_KEY_NAME": "YOUR_COINBASE_CDP_API_KEY_NAME",
        "COINBASE_CDP_PRIVATE_KEY": "YOUR_COINBASE_CDP_PRIVATE_KEY"
      }
    }
  ],
  "basicmachines-co/basic-memory": [
    {
      "command": "uvx",
      "args": [
        "basic-memory",
        "mcp"
      ]
    },
    {
      "command": "uvx",
      "args": [
        "basic-memory",
        "mcp",
        "--project",
        "your-project-name"
      ]
    }
  ],
  "LucasHild/mcp-server-bigquery": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "{{PATH_TO_REPO}}",
        "run",
        "mcp-server-bigquery",
        "--project",
        "{{GCP_PROJECT_ID}}",
        "--location",
        "{{GCP_LOCATION}}"
      ]
    },
    {
      "command": "uvx",
      "args": [
        "mcp-server-bigquery",
        "--project",
        "{{GCP_PROJECT_ID}}",
        "--location",
        "{{GCP_LOCATION}}"
      ]
    }
  ],
  "ergut/mcp-bigquery-server": [
    {
      "command": "node",
      "args": [
        "/path/to/your/clone/mcp-bigquery-server/dist/index.js",
        "--project-id",
        "your-project-id",
        "--location",
        "us-central1",
        "--key-file",
        "/path/to/service-account-key.json"
      ]
    }
  ],
  "leehanchung/bing-search-mcp": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/path/to/your/folder",
        "run",
        "-m",
        "mcp_server_bin_search"
      ],
      "env": {
        "BING_API_KEY": "your-bing-api-key"
      }
    }
  ],
  "lloydzhou/bitable-mcp": [
    {
      "command": "uvx",
      "args": [
        "bitable-mcp"
      ],
      "env": {
        "PERSONAL_BASE_TOKEN": "your-personal-base-token",
        "APP_TOKEN": "your-app-token"
      }
    },
    {
      "command": "python",
      "args": [
        "-m",
        "bitable_mcp"
      ],
      "env": {
        "PERSONAL_BASE_TOKEN": "your-personal-base-token",
        "APP_TOKEN": "your-app-token"
      }
    }
  ],
  "ahujasid/blender-mcp": [
    {
      "command": "uvx",
      "args": [
        "blender-mcp"
      ]
    }
  ],
  "lenwood/cfbd-mcp-server": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/full/path/to/cfbd-mcp-server",
        "run",
        "cfbd-mcp-server"
      ],
      "env": {
        "CFB_API_KEY": "xxx",
        "PATH": "/full/path/to/python"
      }
    }
  ],
  "mcpso/mcp-server-chatsum": [
    {
      "command": "path-to/bin/node",
      "args": [
        "path-to/mcp-server-chatsum/build/index.js"
      ],
      "env": {
        "CHAT_DB_PATH": "path-to/mcp-server-chatsum/chatbot/data/chat.db"
      }
    }
  ],
  "privetin/chroma": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "C:/MCP/server/community/chroma",
        "run",
        "chroma"
      ]
    }
  ],
  "felores/cloudinary-mcp-server": [
    {
      "command": "npx",
      "args": [
        "@felores/cloudinary-mcp-server@latest"
      ],
      "env": {
        "CLOUDINARY_CLOUD_NAME": "your_cloud_name",
        "CLOUDINARY_API_KEY": "your_api_key",
        "CLOUDINARY_API_SECRET": "your_api_secret"
      }
    },
    {
      "command": "node",
      "args": [
        "c:/path/to/cloudinary-mcp-server/dist/index.js"
      ],
      "env": {
        "CLOUDINARY_CLOUD_NAME": "your_cloud_name",
        "CLOUDINARY_API_KEY": "your_api_key",
        "CLOUDINARY_API_SECRET": "your_api_secret"
      }
    }
  ],
  "stippi/code-assistant": [
    {
      "command": "/Users/<username>/workspace/code-assistant/target/release/code-assistant",
      "args": [
        "server"
      ]
    }
  ],
  "bazinga012/mcp_code_executor": [
    {
      "command": "node",
      "args": [
        "/path/to/mcp_code_executor/build/index.js"
      ],
      "env": {
        "CODE_STORAGE_DIR": "/path/to/code/storage",
        "CONDA_ENV_NAME": "your-conda-env"
      }
    }
  ],
  "longmans/coin_api_mcp": [
    {
      "command": "python",
      "args": [
        "-m",
        "coin_api_mcp"
      ]
    }
  ],
  "ivo-toby/contentful-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@ivotoby/contentful-management-mcp-server"
      ],
      "env": {
        "CONTENTFUL_MANAGEMENT_ACCESS_TOKEN": "<Your CMA token>"
      }
    }
  ],
  "DappierAI/dappier-mcp": [
    {
      "command": "uvx",
      "args": [
        "dappier-mcp"
      ],
      "env": {
        "DAPPIER_API_KEY": "YOUR_API_KEY_HERE"
      }
    }
  ],
  "reading-plus-ai/mcp-server-data-exploration": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/Users/username/src/mcp-server-ds",
        "run",
        "mcp-server-ds"
      ]
    },
    {
      "command": "uvx",
      "args": [
        "mcp-server-ds"
      ]
    }
  ],
  "privetin/dataset-viewer": [
    {
      "command": "uv",
      "args": [
        "run",
        "dataset-viewer"
      ]
    }
  ],
  "DMontgomery40/deepseek-mcp-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "deepseek-mcp-server"
      ],
      "env": {
        "DEEPSEEK_API_KEY": "your-api-key"
      }
    }
  ],
  "66julienmartin/MCP-server-Deepseek_R1": [
    {
      "command": "node",
      "args": [
        "/path/to/deepseek-r1-mcp/build/index.js"
      ],
      "env": {
        "DEEPSEEK_API_KEY": "your-api-key"
      }
    }
  ],
  "ruixingshi/deepseek-thinker-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "deepseek-thinker-mcp"
      ],
      "env": {
        "API_KEY": "<Your API Key>",
        "BASE_URL": "<Your Base URL>"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "deepseek-thinker-mcp"
      ],
      "env": {
        "USE_OLLAMA": "true"
      }
    },
    {
      "command": "node",
      "args": [
        "/your-path/deepseek-thinker-mcp/build/index.js"
      ],
      "env": {
        "API_KEY": "<Your API Key>",
        "BASE_URL": "<Your Base URL>"
      }
    }
  ],
  "descope-sample-apps/descope-mcp-server": [
    {
      "command": "node",
      "args": [
        "/path/to/descope-mcp-server/build/index.js"
      ],
      "env": {
        "DESCOPE_PROJECT_ID": "your-descope-project-id-here",
        "DESCOPE_MANAGEMENT_KEY": "your-descope-management-key-here"
      }
    }
  ],
  "ChristianHinge/dicom-mcp": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/path/to/dicom-mcp",
        "run",
        "dicom-mcp",
        "/path/to/configuration.yaml"
      ]
    }
  ],
  "YanxingLiu/dify-mcp-server": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "${DIFY_MCP_SERVER_PATH}",
        "run",
        "dify_mcp_server"
      ],
      "env": {
        "CONFIG_PATH": "$CONFIG_PATH"
      }
    },
    {
      "command": "uv",
      "args": [
        "--directory",
        "/Users/lyx/Downloads/dify-mcp-server",
        "run",
        "dify_mcp_server"
      ],
      "env": {
        "CONFIG_PATH": "/Users/lyx/Downloads/config.yaml"
      }
    }
  ],
  "v-3/discordmcp": [
    {
      "command": "node",
      "args": [
        "path/to/discordmcp/build/index.js"
      ],
      "env": {
        "DISCORD_TOKEN": "your_discord_bot_token_here"
      }
    }
  ],
  "AshDevFr/discourse-mcp-server": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "DISCOURSE_API_URL=https://try.discourse.org",
        "-e",
        "DISCOURSE_API_KEY=1234",
        "-e",
        "DISCOURSE_API_USERNAME=ash",
        "ashdev/discourse-mcp-server"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@ashdev/discourse-mcp-server"
      ],
      "env": {
        "DISCOURSE_API_URL": "https://try.discourse.org",
        "DISCOURSE_API_KEY": "1234",
        "DISCOURSE_API_USERNAME": "ash"
      }
    }
  ],
  "Omedia/mcp-server-drupal": [
    {
      "command": "__BINARY_PATH__",
      "args": [
        "--drupal-url",
        "__DRUPAL_BASE_URL__"
      ],
      "env": {
        "DRUPAL_AUTH_TOKEN": "<AUTH_TOKEN>"
      }
    },
    {
      "command": "__BINARY_PATH__",
      "args": [
        "--drupal-url",
        "__DRUPAL_BASE_URL__"
      ],
      "env": {
        "DRUPAL_AUTH_USER": "<BASIC_AUTH_USERNAME>",
        "DRUPAL_AUTH_PASSWORD": "<BASIC_AUTH_PASSWORD>"
      }
    }
  ],
  "cr7258/elasticsearch-mcp-server": [
    {
      "command": "uvx",
      "args": [
        "elasticsearch-mcp-server"
      ],
      "env": {
        "ELASTIC_HOST": "https://localhost:9200",
        "ELASTIC_USERNAME": "elastic",
        "ELASTIC_PASSWORD": "test123"
      }
    },
    {
      "command": "uv",
      "args": [
        "--directory",
        "path/to/src/elasticsearch_mcp_server",
        "run",
        "elasticsearch-mcp-server"
      ],
      "env": {
        "ELASTIC_HOST": "https://localhost:9200",
        "ELASTIC_USERNAME": "elastic",
        "ELASTIC_PASSWORD": "test123"
      }
    }
  ],
  "mamertofabian/elevenlabs-mcp-server": [
    {
      "command": "uvx",
      "args": [
        "elevenlabs-mcp-server"
      ],
      "env": {
        "ELEVENLABS_API_KEY": "your-api-key",
        "ELEVENLABS_VOICE_ID": "your-voice-id",
        "ELEVENLABS_MODEL_ID": "eleven_flash_v2",
        "ELEVENLABS_STABILITY": "0.5",
        "ELEVENLABS_SIMILARITY_BOOST": "0.75",
        "ELEVENLABS_STYLE": "0.1",
        "ELEVENLABS_OUTPUT_DIR": "output"
      }
    },
    {
      "command": "uv",
      "args": [
        "--directory",
        "path/to/elevenlabs-mcp-server",
        "run",
        "elevenlabs-mcp-server"
      ],
      "env": {
        "ELEVENLABS_API_KEY": "your-api-key",
        "ELEVENLABS_VOICE_ID": "your-voice-id",
        "ELEVENLABS_MODEL_ID": "eleven_flash_v2",
        "ELEVENLABS_STABILITY": "0.5",
        "ELEVENLABS_SIMILARITY_BOOST": "0.75",
        "ELEVENLABS_STYLE": "0.1",
        "ELEVENLABS_OUTPUT_DIR": "output"
      }
    }
  ],
  "marctheshark3/ergo-mcp": [
    {
      "command": "/path/to/your/project/.venv/bin/python",
      "args": [
        "-m",
        "ergo_explorer"
      ]
    },
    {
      "command": "/path/to/your/project/.venv/bin/ergo-mcp",
      "args": []
    }
  ],
  "mcpdotdirect/evm-mcp-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@mcpdotdirect/evm-mcp-server"
      ]
    }
  ],
  "mamertofabian/mcp-everything-search": [
    {
      "command": "uvx",
      "args": [
        "mcp-server-everything-search"
      ],
      "env": {
        "EVERYTHING_SDK_PATH": "path/to/Everything-SDK/dll/Everything64.dll"
      }
    },
    {
      "command": "python",
      "args": [
        "-m",
        "mcp_server_everything_search"
      ],
      "env": {
        "EVERYTHING_SDK_PATH": "path/to/Everything-SDK/dll/Everything64.dll"
      }
    },
    {
      "command": "uvx",
      "args": [
        "mcp-server-everything-search"
      ]
    },
    {
      "command": "python",
      "args": [
        "-m",
        "mcp_server_everything_search"
      ]
    },
    {
      "command": "uv",
      "args": [
        "--directory",
        "/path/to/mcp-everything-search/src/mcp_server_everything_search",
        "run",
        "mcp-server-everything-search"
      ],
      "env": {
        "EVERYTHING_SDK_PATH": "path/to/Everything-SDK/dll/Everything64.dll"
      }
    }
  ],
  "haris-musa/excel-mcp-server": [
    {
      "command": "uv run excel-mcp-server",
      "transport": "sse",
      "env": {
        "EXCEL_FILES_PATH": "/path/to/excel/files"
      }
    }
  ],
  "rishijatia/fantasy-pl-mcp": [
    {
      "command": "python",
      "args": [
        "-m",
        "fpl_mcp"
      ]
    },
    {
      "command": "/full/path/to/your/venv/bin/fpl-mcp"
    }
  ],
  "fastnai/mcp-fastn": [
    {
      "command": "/path/to/your/uv",
      "args": [
        "--directory",
        "/path/to/your/fastn-server",
        "run",
        "fastn-server.py",
        "--api_key",
        "YOUR_API_KEY",
        "--space_id",
        "YOUR_WORKSPACE_ID"
      ]
    }
  ],
  "zcaceres/fetch-mcp": [
    {
      "command": "node",
      "args": [
        "{ABSOLUTE PATH TO FILE HERE}/dist/index.js"
      ]
    }
  ],
  "GLips/Figma-Context-MCP": [
    {
      "command": "npx",
      "args": [
        "-y",
        "figma-developer-mcp",
        "--figma-api-key=<your-figma-api-key>",
        "--stdio"
      ]
    }
  ],
  "vrknetha/mcp-server-firecrawl": [
    {
      "command": "npx",
      "args": [
        "-y",
        "firecrawl-mcp"
      ],
      "env": {
        "FIRECRAWL_API_KEY": "YOUR_API_KEY_HERE"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "firecrawl-mcp"
      ],
      "env": {
        "FIRECRAWL_API_KEY": "YOUR_API_KEY_HERE",
        "FIRECRAWL_RETRY_MAX_ATTEMPTS": "5",
        "FIRECRAWL_RETRY_INITIAL_DELAY": "2000",
        "FIRECRAWL_RETRY_MAX_DELAY": "30000",
        "FIRECRAWL_RETRY_BACKOFF_FACTOR": "3",
        "FIRECRAWL_CREDIT_WARNING_THRESHOLD": "2000",
        "FIRECRAWL_CREDIT_CRITICAL_THRESHOLD": "500"
      }
    }
  ],
  "MFYDev/ghost-mcp": [
    {
      "command": "/Users/username/.local/bin/uv",
      "args": [
        "--directory",
        "/path/to/ghost-mcp",
        "run",
        "src/main.py"
      ],
      "env": {
        "GHOST_API_URL": "your_ghost_api_url",
        "GHOST_STAFF_API_KEY": "your_staff_api_key"
      }
    }
  ],
  "ko1ynnky/github-actions-mcp-server": [
    {
      "command": "node",
      "args": [
        "<path-to-your-project>/dist/index.js"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
      }
    }
  ],
  "GongRzhe/Gmail-MCP-Server": [
    {
      "command": "npx",
      "args": [
        "@gongrzhe/server-gmail-autoauth-mcp"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-v",
        "mcp-gmail:/gmail-server",
        "-e",
        "GMAIL_CREDENTIALS_PATH=/gmail-server/credentials.json",
        "mcp/gmail"
      ]
    }
  ],
  "baryhuang/mcp-headless-gmail": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "buryhuang/mcp-headless-gmail:latest"
      ]
    }
  ],
  "Coding-Solo/godot-mcp": [
    {
      "command": "node",
      "args": [
        "/absolute/path/to/godot-mcp/build/index.js"
      ],
      "env": {
        "DEBUG": "true"
      },
      "disabled": false,
      "autoApprove": [
        "launch_editor",
        "run_project",
        "get_debug_output",
        "stop_project",
        "get_godot_version",
        "list_projects",
        "get_project_info",
        "create_scene",
        "add_node",
        "load_sprite",
        "export_mesh_library",
        "save_scene",
        "get_uid",
        "update_project_uids"
      ]
    },
    {
      "command": "node",
      "args": [
        "/absolute/path/to/godot-mcp/build/index.js"
      ],
      "env": {
        "DEBUG": "true"
      }
    }
  ],
  "mark3labs/mcp-filesystem-server": [
    {
      "command": "mcp-filesystem-server",
      "args": [
        "/Users/username/Desktop",
        "/path/to/other/allowed/dir"
      ]
    }
  ],
  "v-3/google-calendar": [
    {
      "command": "node",
      "args": [
        "/ABSOLUTE/PATH/TO/YOUR/build/index.js"
      ],
      "env": {
        "GOOGLE_CLIENT_ID": "your_client_id_here",
        "GOOGLE_CLIENT_SECRET": "your_client_secret_here",
        "GOOGLE_REDIRECT_URI": "http://localhost",
        "GOOGLE_REFRESH_TOKEN": "your_refresh_token_here"
      }
    }
  ],
  "adenot/mcp-google-search": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@adenot/mcp-google-search"
      ],
      "env": {
        "GOOGLE_API_KEY": "your-api-key-here",
        "GOOGLE_SEARCH_ENGINE_ID": "your-search-engine-id-here"
      }
    }
  ],
  "zcaceres/gtasks-mcp": [
    {
      "command": "/opt/homebrew/bin/node",
      "args": [
        "{ABSOLUTE PATH TO FILE HERE}/dist/index.js"
      ]
    }
  ],
  "hannesj/mcp-graphql-schema": [
    {
      "command": "npx",
      "args": [
        "-y",
        "mcp-graphql-schema",
        "/ABSOLUTE/PATH/TO/schema.graphqls"
      ]
    }
  ],
  "horizondatawave/hdw-mcp-server": [
    {
      "command": "npx",
      "args": [
        "@horizondatawave/mcp"
      ],
      "env": {
        "HDW_ACCESS_TOKEN": "YOUR_HD_W_ACCESS_TOKEN",
        "HDW_ACCOUNT_ID": "YOUR_HD_W_ACCOUNT_ID"
      }
    },
    {
      "command": "node",
      "args": [
        "/path/to/your/build/index.js"
      ],
      "env": {
        "HDW_ACCESS_TOKEN": "YOUR_HD_W_ACCESS_TOKEN",
        "HDW_ACCOUNT_ID": "YOUR_HD_W_ACCOUNT_ID"
      }
    },
    {
      "command": "npx",
      "args": [
        ""
      ],
      "env": {
        "HDW_ACCESS_TOKEN": "YOUR_HD_W_ACCESS_TOKEN",
        "HDW_ACCOUNT_ID": "YOUR_HD_W_ACCOUNT_ID"
      }
    }
  ],
  "buryhuang/mcp-hubspot": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "HUBSPOT_ACCESS_TOKEN=your_access_token_here",
        "buryhuang/mcp-hubspot:latest"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "buryhuang/mcp-hubspot:latest",
        "--access-token",
        "your_access_token_here"
      ]
    }
  ],
  "evalstate/mcp-hfspace": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@llmindset/mcp-hfspace"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@llmindset/mcp-hfspace",
        "--work-dir=/Users/evalstate/mcp-store",
        "shuttleai/shuttle-jaguar",
        "styletts2/styletts2",
        "Qwen/QVQ-72B-preview"
      ]
    }
  ],
  "mektigboy/server-hyperliquid": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@mektigboy/server-hyperliquid"
      ]
    }
  ],
  "GongRzhe/Image-Generation-MCP-Server": [
    {
      "command": "node",
      "args": [
        "/path/to/image-gen-server/build/index.js"
      ],
      "env": {
        "REPLICATE_API_TOKEN": "your-replicate-api-token",
        "MODEL": "alternative-model-name"
      },
      "disabled": false,
      "autoApprove": []
    }
  ],
  "idoru/influxdb-mcp-server": [
    {
      "command": "npx",
      "args": [
        "influxdb-mcp-server"
      ],
      "env": {
        "INFLUXDB_TOKEN": "your_token",
        "INFLUXDB_URL": "http://localhost:8086",
        "INFLUXDB_ORG": "your_org"
      }
    },
    {
      "command": "node",
      "args": [
        "/path/to/influxdb-mcp-server/src/index.js"
      ],
      "env": {
        "INFLUXDB_TOKEN": "your_token",
        "INFLUXDB_URL": "http://localhost:8086",
        "INFLUXDB_ORG": "your_org"
      }
    }
  ],
  "sergehuber/inoyu-mcp-unomi-server": [
    {
      "command": "node",
      "args": [
        "/path/to/local/mcp-unomi-server/build/index.js"
      ],
      "env": {}
    }
  ],
  "ferrislucas/iterm-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "iterm-mcp"
      ]
    }
  ],
  "GongRzhe/JSON-MCP-Server": [
    {
      "command": "npx",
      "args": [
        "@gongrzhe/server-json-mcp@1.0.3"
      ]
    },
    {
      "command": "node",
      "args": [
        "path/to/build/index.js"
      ]
    }
  ],
  "ChristophEnglisch/keycloak-model-context-protocol": [
    {
      "command": "npx",
      "args": [
        "-y",
        "keycloak-model-context-protocol"
      ],
      "env": {
        "KEYCLOAK_URL": "http://localhost:8080",
        "KEYCLOAK_ADMIN": "admin",
        "KEYCLOAK_ADMIN_PASSWORD": "admin"
      }
    },
    {
      "command": "node",
      "args": [
        "path/to/dist/index.js"
      ],
      "env": {
        "KEYCLOAK_URL": "http://localhost:8080",
        "KEYCLOAK_ADMIN": "admin",
        "KEYCLOAK_ADMIN_PASSWORD": "admin"
      }
    }
  ],
  "kiwamizamurai/mcp-kibela-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@kiwamizamurai/mcp-kibela-server"
      ],
      "env": {
        "KIBELA_TEAM": "your-team",
        "KIBELA_TOKEN": "your-token"
      }
    }
  ],
  "macrat/mcp-server-kintone": [
    {
      "command": "C:\\path\\to\\mcp-server-kintone.exe",
      "env": {
        "KINTONE_BASE_URL": "https://<domain>.cybozu.com",
        "KINTONE_USERNAME": "<your username>",
        "KINTONE_PASSWORD": "<your password>",
        "KINTONE_API_TOKEN": "<your api token>, <another api token>, ...",
        "KINTONE_ALLOW_APPS": "1, 2, 3, ...",
        "KINTONE_DENY_APPS": "4, 5, ..."
      }
    }
  ],
  "Flux159/mcp-server-kubernetes": [
    {
      "command": "npx",
      "args": [
        "mcp-server-kubernetes"
      ]
    },
    {
      "command": "node",
      "args": [
        "/path/to/your/mcp-server-kubernetes/dist/index.js"
      ]
    }
  ],
  "GongRzhe/Langflow-DOC-QA-SERVER": [
    {
      "command": "node",
      "args": [
        "/path/to/doc-qa-server/build/index.js"
      ],
      "env": {
        "API_ENDPOINT": "http://127.0.0.1:7860/api/v1/run/480ec7b3-29d2-4caa-b03b-e74118f35fac"
      }
    }
  ],
  "jerhadf/linear-mcp-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "linear-mcp-server"
      ],
      "env": {
        "LINEAR_API_KEY": "your_linear_api_key_here"
      }
    }
  ],
  "amornpan/py-mcp-line": [
    {
      "command": "python",
      "args": [
        "server.py"
      ],
      "env": {
        "LINE_CHANNEL_SECRET": "your_channel_secret",
        "LINE_ACCESS_TOKEN": "your_access_token",
        "SERVER_PORT": "8000",
        "MESSAGES_FILE": "data/messages.json"
      }
    }
  ],
  "run-llama/mcp-server-llamacloud": [
    {
      "command": "node",
      "args": [
        "/path/to/llamacloud/build/index.js"
      ],
      "env": {
        "LLAMA_CLOUD_INDEX_NAME": "<YOUR_INDEX_NAME>",
        "LLAMA_CLOUD_PROJECT_NAME": "<YOUR_PROJECT_NAME>",
        "LLAMA_CLOUD_API_KEY": "<YOUR_API_KEY>"
      }
    }
  ],
  "carterlasalle/mac_messages_mcp": [
    {
      "command": "uvx",
      "args": [
        "mac-messages-mcp"
      ]
    }
  ],
  "abel9851/mcp-server-mariadb": [
    {
      "command": "/PATH/TO/uv",
      "args": [
        "--directory",
        "/YOUR/SOURCE/PATH/mcp-server-mariadb/src/mcp_server_mariadb",
        "run",
        "server.py"
      ],
      "env": {
        "MARIADB_HOST": "127.0.0.1",
        "MARIADB_USER": "USER",
        "MARIADB_PASSWORD": "PASSWORD",
        "MARIADB_DATABASE": "DATABASE",
        "MARIADB_PORT": "3306"
      }
    }
  ],
  "tesla0225/mcp-create": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp-create"
      ]
    }
  ],
  "anaisbetts/mcp-installer": [
    {
      "command": "npx",
      "args": [
        "@anaisbetts/mcp-installer"
      ]
    }
  ],
  "nkapila6/mcp-local-rag": [
    {
      "command": "uvx",
      "args": [
        "--python=3.10",
        "--from",
        "git+https://github.com/nkapila6/mcp-local-rag",
        "mcp-local-rag"
      ]
    },
    {
      "command": "uv",
      "args": [
        "--directory",
        "<path where this folder is located>/mcp-local-rag/",
        "run",
        "src/mcp_local_rag/main.py"
      ]
    }
  ],
  "sparfenyuk/mcp-proxy": [
    {
      "command": "mcp-proxy",
      "args": [
        "http://example.io/sse"
      ],
      "env": {
        "API_ACCESS_TOKEN": "access-token"
      }
    }
  ],
  "JexinSam/mssql_mcp_server": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "path/to/mssql_mcp_server",
        "run",
        "mssql_mcp_server"
      ],
      "env": {
        "MSSQL_DRIVER": "mssql_driver",
        "MSSQL_HOST": "localhost",
        "MSSQL_USER": "your_username",
        "MSSQL_PASSWORD": "your_password",
        "MSSQL_DATABASE": "your_database"
      }
    }
  ],
  "amornpan/py-mcp-mssql": [
    {
      "command": "python",
      "args": [
        "server.py"
      ],
      "env": {
        "MSSQL_SERVER": "your_server",
        "MSSQL_DATABASE": "your_database",
        "MSSQL_USER": "your_username",
        "MSSQL_PASSWORD": "your_password",
        "MSSQL_DRIVER": "{ODBC Driver 17 for SQL Server}"
      }
    }
  ],
  "YuChenSSR/mindmap-mcp-server": [
    {
      "command": "uvx",
      "args": [
        "mindmap-mcp-server",
        "--return-type",
        "html"
      ]
    },
    {
      "command": "uvx",
      "args": [
        "mindmap-mcp-server",
        "--return-type",
        "filePath"
      ]
    },
    {
      "command": "python",
      "args": [
        "/path/to/your/mindmap_mcp_server/server.py",
        "--return-type",
        "html"
      ]
    },
    {
      "command": "python",
      "args": [
        "/path/to/your/mindmap_mcp_server/server.py",
        "--return-type",
        "filePath"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "-v",
        "/path/to/output/folder:/output",
        "ychen94/mindmap-converter-mcp:latest"
      ]
    }
  ],
  "kiliczsh/mcp-mongo-server": [
    {
      "command": "node",
      "args": [
        "~/mcp-mongo-server/build/index.js",
        "mongodb://muhammed:kilic@mongodb.localhost/namespace"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "mcp-mongo-server",
        "mongodb://muhammed:kilic@mongodb.localhost/sample_namespace"
      ]
    }
  ],
  "furey/mongodb-lens": [
    {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "--network=host",
        "--pull=always",
        "furey/mongodb-lens",
        "mongodb://your-connection-string"
      ]
    },
    {
      "command": "/path/to/node",
      "args": [
        "/path/to/mongodb-lens.js",
        "mongodb://your-connection-string"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "--network=host",
        "mongodb-lens",
        "mongodb://your-connection-string"
      ]
    },
    {
      "command": "/path/to/npx",
      "args": [
        "-y",
        "mongodb-lens@latest"
      ]
    }
  ],
  "yanmxa/multicluster-mcp-server": [
    {
      "command": "/path/to/multicluster-mcp-server/build/index.js"
    }
  ],
  "benborla/mcp-server-mysql": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@benborla29/mcp-server-mysql"
      ],
      "env": {
        "MYSQL_HOST": "127.0.0.1",
        "MYSQL_PORT": "3306",
        "MYSQL_USER": "root",
        "MYSQL_PASS": "",
        "MYSQL_DB": "db_name"
      }
    },
    {
      "command": "/path/to/npx/binary/npx",
      "args": [
        "-y",
        "@benborla29/mcp-server-mysql"
      ],
      "env": {
        "MYSQL_HOST": "127.0.0.1",
        "MYSQL_PORT": "3306",
        "MYSQL_USER": "root",
        "MYSQL_PASS": "",
        "MYSQL_DB": "db_name",
        "PATH": "/path/to/node/bin:/usr/bin:/bin",
        "MYSQL_POOL_SIZE": "10",
        "MYSQL_QUERY_TIMEOUT": "30000",
        "MYSQL_CACHE_TTL": "60000",
        "MYSQL_RATE_LIMIT": "100",
        "MYSQL_MAX_QUERY_COMPLEXITY": "1000",
        "MYSQL_SSL": "true",
        "MYSQL_ENABLE_LOGGING": "true",
        "MYSQL_LOG_LEVEL": "info",
        "MYSQL_METRICS_ENABLED": "true"
      }
    }
  ],
  "designcomputer/mysql_mcp_server": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "path/to/mysql_mcp_server",
        "run",
        "mysql_mcp_server"
      ],
      "env": {
        "MYSQL_HOST": "localhost",
        "MYSQL_PORT": "3306",
        "MYSQL_USER": "your_username",
        "MYSQL_PASSWORD": "your_password",
        "MYSQL_DATABASE": "your_database"
      }
    }
  ],
  "ProgramComputer/NASA-MCP-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@programcomputer/nasa-mcp-server"
      ],
      "env": {
        "NASA_API_KEY": "your-api-key"
      }
    }
  ],
  "r-huijts/ns-mcp-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "ns-mcp-server"
      ],
      "env": {
        "NS_API_KEY": "your_api_key_here"
      }
    },
    {
      "command": "node",
      "args": [
        "/path/to/ns-server/build/index.js"
      ],
      "env": {
        "NS_API_KEY": "your_api_key_here"
      }
    }
  ],
  "da-okazaki/mcp-neo4j-server": [
    {
      "command": "npx",
      "args": [
        "@alanse/mcp-neo4j-server"
      ],
      "env": {
        "NEO4J_URI": "bolt://localhost:7687",
        "NEO4J_USERNAME": "neo4j",
        "NEO4J_PASSWORD": "your-password"
      }
    }
  ],
  "bigcodegen/mcp-neovim-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "mcp-neovim-server"
      ],
      "env": {
        "ALLOW_SHELL_COMMANDS": "true",
        "NVIM_SOCKET_PATH": "/tmp/nvim"
      }
    }
  ],
  "suekou/mcp-notion-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@suekou/mcp-notion-server"
      ],
      "env": {
        "NOTION_API_TOKEN": "your-integration-token"
      }
    },
    {
      "command": "node",
      "args": [
        "your-built-file-path"
      ],
      "env": {
        "NOTION_API_TOKEN": "your-integration-token"
      }
    }
  ],
  "v-3/notion-server": [
    {
      "command": "node",
      "args": [
        "/absolute/path/to/notion-server/build/index.js"
      ],
      "env": {
        "NOTION_API_KEY": "your_notion_api_key_here"
      }
    }
  ],
  "teddyzxcv/ntfy-mcp": [
    {
      "command": "node",
      "args": [
        "/path/to/ntfy-mcp/build/index.js"
      ],
      "env": {
        "NTFY_TOPIC": "<your topic name>"
      },
      "autoApprove": [
        "notify_user"
      ]
    }
  ],
  "StevenStavrakis/obsidian-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "obsidian-mcp",
        "/path/to/your/vault",
        "/path/to/your/vault2"
      ]
    },
    {
      "command": "node",
      "args": [
        "<absolute-path-to-obsidian-mcp>/build/main.js",
        "/path/to/your/vault",
        "/path/to/your/vault2"
      ]
    }
  ],
  "yuanoOo/oceanbase_mcp_server": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "path/to/oceanbase_mcp_server",
        "run",
        "oceanbase_mcp_server"
      ],
      "env": {
        "OB_HOST": "localhost",
        "OB_PORT": "2881",
        "OB_USER": "your_username",
        "OB_PASSWORD": "your_password",
        "OB_DATABASE": "your_database"
      }
    }
  ],
  "kapilduraphe/okta-mcp-server": [
    {
      "command": "node",
      "args": [
        "PATH_TO_PROJECT_DIRECTORY/dist/index.js"
      ],
      "env": {
        "OKTA_ORG_URL": "https://your-domain.okta.com",
        "OKTA_API_TOKEN": "your-api-token"
      }
    }
  ],
  "ConechoAI/openai-websearch-mcp": [
    {
      "command": "uvx",
      "args": [
        "openai-websearch-mcp"
      ],
      "env": {
        "OPENAI_API_KEY": "your-api-key-here"
      }
    },
    {
      "command": "python",
      "args": [
        "-m",
        "openai_websearch_mcp"
      ],
      "env": {
        "OPENAI_API_KEY": "your-api-key-here"
      }
    }
  ],
  "baryhuang/mcp-server-any-openapi": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "OPENAPI_JSON_DOCS_URL=https://api.finance.com/openapi.json",
        "-e",
        "MCP_API_PREFIX=finance",
        "buryhuang/mcp-server-any-openapi:latest"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "OPENAPI_JSON_DOCS_URL=https://api.finance.com/openapi.json",
        "-e",
        "API_REQUEST_BASE_URL=https://api.finance.staging.com",
        "-e",
        "MCP_API_PREFIX=finance",
        "buryhuang/mcp-server-any-openapi:latest"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "OPENAPI_JSON_DOCS_URL=https://api.example.com/openapi.json",
        "-e",
        "MCP_API_PREFIX=finance",
        "buryhuang/mcp-server-any-openapi:latest"
      ]
    }
  ],
  "hannesj/mcp-openapi-schema": [
    {
      "command": "npx",
      "args": [
        "-y",
        "mcp-openapi-schema",
        "/ABSOLUTE/PATH/TO/openapi.yaml"
      ]
    }
  ],
  "Spathodea-Network/opencti-mcp": [
    {
      "command": "node",
      "args": [
        "path/to/opencti-server/build/index.js"
      ],
      "env": {
        "OPENCTI_URL": "${OPENCTI_URL}",
        "OPENCTI_TOKEN": "${OPENCTI_TOKEN}"
      }
    }
  ],
  "asusevski/opendota-mcp-server": [
    {
      "command": "wsl.exe",
      "args": [
        "--",
        "bash",
        "-c",
        "cd ~/opendota-mcp-server && source .venv/bin/activate && python src/opendota_server/server.py"
      ]
    }
  ],
  "shanejonas/openrpc-mpc-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "openrpc-mcp-server"
      ]
    }
  ],
  "open-strategy-partners/osp_marketing_tools": [
    {
      "command": "uvx",
      "args": [
        "--from",
        "git+https://github.com/open-strategy-partners/osp_marketing_tools@main",
        "osp_marketing_tools"
      ]
    }
  ],
  "sirmews/mcp-pinecone": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "{project_dir}",
        "run",
        "mcp-pinecone"
      ]
    },
    {
      "command": "uvx",
      "args": [
        "--index-name",
        "{your-index-name}",
        "--api-key",
        "{your-secret-api-key}",
        "mcp-pinecone"
      ]
    }
  ],
  "felores/placid-mcp-server": [
    {
      "command": "npx",
      "args": [
        "@felores/placid-mcp-server"
      ],
      "env": {
        "PLACID_API_TOKEN": "your-api-token"
      }
    },
    {
      "command": "node",
      "args": [
        "path/to/placid-mcp-server/build/index.js"
      ],
      "env": {
        "PLACID_API_TOKEN": "your-api-token"
      }
    }
  ],
  "executeautomation/mcp-playwright": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@executeautomation/playwright-mcp-server"
      ]
    }
  ],
  "shannonlal/mcp-postman": [
    {
      "command": "node",
      "args": [
        "/absolute/path/to/mcp-postman/build/index.js"
      ]
    }
  ],
  "kenjihikmatullah/productboard-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "productboard-mcp"
      ],
      "env": {
        "PRODUCTBOARD_ACCESS_TOKEN": "<YOUR_TOKEN>"
      }
    }
  ],
  "pab1it0/prometheus-mcp-server": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "<full path to prometheus-mcp-server directory>",
        "run",
        "src/prometheus_mcp_server/main.py"
      ],
      "env": {
        "PROMETHEUS_URL": "http://your-prometheus-server:9090",
        "PROMETHEUS_USERNAME": "your_username",
        "PROMETHEUS_PASSWORD": "your_password"
      }
    },
    {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "-e",
        "PROMETHEUS_URL",
        "-e",
        "PROMETHEUS_USERNAME",
        "-e",
        "PROMETHEUS_PASSWORD",
        "prometheus-mcp-server"
      ],
      "env": {
        "PROMETHEUS_URL": "http://your-prometheus-server:9090",
        "PROMETHEUS_USERNAME": "your_username",
        "PROMETHEUS_PASSWORD": "your_password"
      }
    }
  ],
  "ashiknesin/pushover-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "pushover-mcp@latest",
        "start",
        "--token",
        "YOUR_TOKEN",
        "--user",
        "YOUR_USER"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "pushover-mcp@latest",
        "start",
        "--token",
        "YOUR_TOKEN",
        "--user",
        "YOUR_USER"
      ]
    }
  ],
  "jjsantos01/qgis_mcp": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/ABSOLUTE/PATH/TO/PARENT/REPO/FOLDER/qgis_mcp/src/qgis_mcp",
        "run",
        "qgis_mcp_server.py"
      ]
    }
  ],
  "GongRzhe/Quickchart-MCP-Server": [
    {
      "command": "node",
      "args": [
        "/path/to/quickchart-server/build/index.js"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@gongrzhe/quickchart-mcp-server"
      ]
    }
  ],
  "66julienmartin/MCP-server-Qwen_Max": [
    {
      "command": "node",
      "args": [
        "/path/to/Qwen_Max/build/index.js"
      ],
      "env": {
        "DASHSCOPE_API_KEY": "your-api-key-here"
      }
    }
  ],
  "GongRzhe/REDIS-MCP-Server": [
    {
      "command": "npx",
      "args": [
        "@gongrzhe/server-redis-mcp@1.0.0",
        "redis://localhost:6379"
      ]
    },
    {
      "command": "node",
      "args": [
        "path/to/build/index.js",
        "redis://10.1.210.223:6379"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/redis",
        "redis://host.docker.internal:6379"
      ]
    }
  ],
  "skydeckai/mcp-server-rememberizer": [
    {
      "command": "uvx",
      "args": [
        "mcp-server-rememberizer"
      ],
      "env": {
        "REMEMBERIZER_API_TOKEN": "your_rememberizer_api_token"
      }
    }
  ],
  "deepfates/mcp-replicate": [
    {
      "command": "mcp-replicate",
      "env": {
        "REPLICATE_API_TOKEN": "your_token_here"
      }
    },
    {
      "command": "mcp-replicate",
      "env": {
        "REPLICATE_API_TOKEN": "your_token_here"
      }
    }
  ],
  "xxxbrian/mcp-rquest": [
    {
      "command": "uvx",
      "args": [
        "mcp-rquest"
      ]
    },
    {
      "command": "python",
      "args": [
        "-m",
        "mcp_rquest"
      ]
    },
    {
      "command": "pipx",
      "args": [
        "run",
        "mcp-rquest"
      ]
    }
  ],
  "r-huijts/rijksmuseum-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-rijksmuseum"
      ],
      "env": {
        "RIJKSMUSEUM_API_KEY": "your_api_key_here"
      }
    }
  ],
  "cyberchitta/scrapling-fetch-mcp": [
    {
      "command": "uvx",
      "args": [
        "scrapling-fetch-mcp"
      ]
    }
  ],
  "ihor-sokoliuk/mcp-searxng": [
    {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "SEARXNG_URL",
        "mcp-server-searxng:latest"
      ],
      "env": {
        "SEARXNG_URL": "YOUR_SEARXNG_INSTANCE_URL"
      }
    }
  ],
  "osomai/servicenow-mcp": [
    {
      "command": "/Users/yourusername/dev/servicenow-mcp/.venv/bin/python",
      "args": [
        "-m",
        "servicenow_mcp.cli"
      ],
      "env": {
        "SERVICENOW_INSTANCE_URL": "https://your-instance.service-now.com",
        "SERVICENOW_USERNAME": "your-username",
        "SERVICENOW_PASSWORD": "your-password",
        "SERVICENOW_AUTH_TYPE": "basic"
      }
    }
  ],
  "Laksh-star/mcp-server-tmdb": [
    {
      "command": "/full/path/to/dist/index.js",
      "env": {
        "TMDB_API_KEY": "your_api_key_here"
      }
    }
  ],
  "RamXX/mcp-tavily": [
    {
      "command": "python",
      "args": [
        "-m",
        "mcp_server_tavily"
      ]
    }
  ],
  "GongRzhe/terminal-controller-mcp": [
    {
      "command": "uvx",
      "args": [
        "terminal_controller"
      ]
    },
    {
      "command": "python",
      "args": [
        "-m",
        "terminal_controller"
      ]
    }
  ],
  "delorenj/mcp-server-ticketmaster": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@delorenj/mcp-server-ticketmaster"
      ],
      "env": {
        "TICKETMASTER_API_KEY": "your-api-key-here"
      }
    }
  ],
  "abhiz123/todoist-mcp-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@abhiz123/todoist-mcp-server"
      ],
      "env": {
        "TODOIST_API_TOKEN": "your_api_token_here"
      }
    }
  ],
  "suhail-ak-s/mcp-typesense-server": [
    {
      "command": "node",
      "args": [
        "~/typesense-mcp-server/dist/index.js",
        "--host",
        "your-typesense-host",
        "--port",
        "8108",
        "--protocol",
        "http",
        "--api-key",
        "your-api-key"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "typesense-mcp-server",
        "--host",
        "your-typesense-host",
        "--port",
        "8108",
        "--protocol",
        "http",
        "--api-key",
        "your-api-key"
      ]
    }
  ],
  "GongRzhe/TRAVEL-PLANNER-MCP-Server": [
    {
      "command": "npx",
      "args": [
        "@gongrzhe/server-travelplanner-mcp"
      ],
      "env": {
        "GOOGLE_MAPS_API_KEY": "your_google_maps_api_key"
      }
    },
    {
      "command": "node",
      "args": [
        "path/to/dist/index.js"
      ],
      "env": {
        "GOOGLE_MAPS_API_KEY": "your_google_maps_api_key"
      }
    }
  ],
  "ognis1205/mcp-server-unitycatalog": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/<path to your local git repository>/mcp-server-unitycatalog",
        "run",
        "mcp-server-unitycatalog",
        "--uc_server",
        "<your unity catalog url>",
        "--uc_catalog",
        "<your catalog name>",
        "--uc_schema",
        "<your schema name>"
      ]
    },
    {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "mcp/unitycatalog",
        "--uc_server",
        "<your unity catalog url>",
        "--uc_catalog",
        "<your catalog name>",
        "--uc_schema",
        "<your schema name>"
      ]
    }
  ],
  "CoderGamester/mcp-unity": [
    {
      "command": "node",
      "args": [
        "ABSOLUTE/PATH/TO/mcp-unity/Server/build/index.js"
      ],
      "env": {
        "UNITY_PORT": "8090"
      }
    }
  ],
  "mfukushim/map-traveler-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@mfukushim/map-traveler-mcp"
      ],
      "env": {
        "GoogleMapApi_key": "(Google Map API key)",
        "mapApi_url": "(Optional: Map API custom endpoint. Example: direction=https://xxxx,places=https://yyyy )",
        "time_scale": "(Optional:Scale of travel time on real roads duration. default 4)",
        "sqlite_path": "(db save path: e.g. %USERPROFILE%/Desktop/traveler.sqlite ,$HOME/traveler.sqlite )",
        "rembg_path": "(absolute path of the installed rembg cli)",
        "remBgUrl": "(rembg API URL)",
        "pixAi_key": "(pixAi API key)",
        "sd_key": "(or Stability.ai image generation API key",
        "pixAi_modelId": "(Optional: pixAi ModelId, if not set use default model 1648918127446573124 ",
        "comfy_url": "(Option: Generate image using ComfyUI API at specified URL. Example: http://192.168.1.100:8188)",
        "comfy_workflow_t2i": "(Optional: Path to API workflow file when using text to image with ComfyUI. If not specified: assets/comfy/t2i_sample.json)",
        "comfy_workflow_i2i": "(Optional: Path of API workflow file when image to image in ComfyUI. If not specified: assets/comfy/i2i_sample.json)",
        "comfy_params": "(Optional: Variable values to send to the workflow via comfyUI API)",
        "fixed_model_prompt": "(Optional: Fixed avatar generation prompt. You will no longer be able to change your avatar during conversations.)",
        "bodyAreaRatio": "(Optional: Acceptable avatar image area ratio. default 0.042)",
        "bodyHWRatio": "(Optional: Acceptable avatar image aspect ratios. default 1.5~2.3)",
        "bodyWindowRatioW": "(Optional: Avatar composite window horizontal ratio. default 0.5)",
        "bodyWindowRatioH": "(Optional: Avatar composite window aspect ratio. default 0.75)",
        "bs_id": "(Bluesky sns registration address)",
        "bs_pass": "(bluesky sns password)",
        "bs_handle": "(bluesky sns handle name: e.g. xxxxxxxx.bsky.social )",
        "filter_tools": "(Optional: Directly filter the tools to be used. All are available if not specified. e.g. tips,set_traveler_location)",
        "moveMode": "(Option: Specify whether the movement mode is realtime or skip. default realtime)",
        "image_width": "(Option: Output image width (pixels) Default is 512)"
      }
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@mfukushim/map-traveler-mcp"
      ]
    }
  ],
  "dinghuazhou/sample-mcp-server-tos": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/Users/user/generative_ai/model_context_protocol/tos-mcp-server",
        "run",
        "tos-mcp-server"
      ]
    }
  ],
  "kapilduraphe/webflow-mcp-server": [
    {
      "command": "node",
      "args": [
        "/ABSOLUTE/PATH/TO/YOUR/build/index.js"
      ],
      "env": {
        "WEBFLOW_API_TOKEN": "your-api-token"
      }
    }
  ],
  "SimonB97/win-cli-mcp-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@simonb97/server-win-cli"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@simonb97/server-win-cli",
        "--config",
        "path/to/your/config.json"
      ]
    }
  ],
  "anshumax/world_bank_mcp_server": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "path/to/world_bank_mcp_server",
        "run",
        "world_bank_mcp_server"
      ]
    }
  ],
  "EnesCinr/twitter-mcp": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@enescinar/twitter-mcp"
      ],
      "env": {
        "API_KEY": "your_api_key_here",
        "API_SECRET_KEY": "your_api_secret_key_here",
        "ACCESS_TOKEN": "your_access_token_here",
        "ACCESS_TOKEN_SECRET": "your_access_token_secret_here"
      }
    }
  ],
  "vidhupv/x-mcp": [
    {
      "command": "uv",
      "args": [
        "--directory",
        "/path/to/x-mcp",
        "run",
        "x-mcp"
      ],
      "env": {
        "TWITTER_API_KEY": "your_api_key",
        "TWITTER_API_SECRET": "your_api_secret",
        "TWITTER_ACCESS_TOKEN": "your_access_token",
        "TWITTER_ACCESS_TOKEN_SECRET": "your_access_token_secret"
      }
    }
  ],
  "ShenghaiWang/xcodebuild": [
    {
      "command": "uvx",
      "args": [
        "mcpxcodebuild"
      ]
    },
    {
      "command": "python",
      "args": [
        "-m",
        "mcpxcodebuild"
      ]
    }
  ],
  "XGenerationLab/xiyan_mcp_server": [
    {
      "command": "python",
      "args": [
        "-m",
        "xiyan_mcp_server"
      ],
      "env": {
        "YML": "PATH/TO/YML"
      }
    }
  ],
  "apeyroux/mcp-xmind": [
    {
      "command": "node",
      "args": [
        "/Users/alex/Src/mcp-xmind/dist/index.js",
        "/Users/alex/XMind"
      ]
    },
    {
      "command": "npx",
      "args": [
        "-y",
        "@41px/mcp-xmind",
        "/Users/alex/XMind"
      ]
    }
  ],
  "ZubeidHendricks/youtube-mcp-server": [
    {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-youtube"
      ],
      "env": {
        "YOUTUBE_API_KEY": "<YOUR_API_KEY>"
      }
    }
  ],
  "tadata-org/fastapi_mcp": [
    {
      "command": "mcp-proxy",
      "args": [
        "http://127.0.0.1:8000/mcp"
      ]
    },
    {
      "command": "/Full/Path/To/Your/Executable/mcp-proxy",
      "args": [
        "http://127.0.0.1:8000/mcp"
      ]
    }
  ]
}